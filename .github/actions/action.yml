# GHA does not support dynamic outputs for matrix jobs https://github.com/orgs/community/discussions/26639
# This composite action is a workaround to allow modules to be separately versioned w/o a bunch of hacks
# Whenever https://github.com/actions/runner/pull/2477#issuecomment-2445640849 lands, this can be folded back in
name: 'version-and-doc'
description: 'handle version bumps & doc generation for TF modules monorepo'
inputs:
  package-name:
    description: 'Package to version bump & doc'
    required: true
  release-type:
    description: 'Semver release type'
    required: true
outputs:
  new-version:
    description: "Version after bumping"
    value: ${{ steps.new-version.outputs.result }}
runs:
  using: "composite"
  steps:
    - name: Checkout all tags
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false
    - name: Detect previous version number
      id: prev-version
      env:
        PACKAGE_NAME: ${{ inputs.package-name }}
      shell: bash
      run: |
        git fetch --tags
        TAG=$(git for-each-ref --sort=-version:refname --count 1 --format="%(refname:short)" "refs/tags/$PACKAGE_NAME-[0-9].[0-9].[0-9]")

        if [ -z "$TAG" ] ; then
          echo "No git tag found for $PACKAGE_NAME, using 0.0.0 as previous version"
          echo "result=0.0.0" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        TAG_VERSION="${TAG: -5}"
        echo "TAG_VERSION = $TAG_VERSION"
        SEMVER_REGEX="^[0-9].[0-9].[0-9]$"
        if [[ $TAG_VERSION =~ $SEMVER_REGEX ]] ; then
          echo "$TAG is valid semver, using it"
          echo "result=${TAG_VERSION}" >> "$GITHUB_OUTPUT"
          exit 0
        else
          echo "Error: $TAG does not end in a valid semver"
          exit 1
        fi
    - name: Determine new version number
      uses: actions/github-script@v7
      id: new-version
      env:
        PREV_VERSION: ${{ steps.prev-version.outputs.result }}
        RELEASE_TYPE: ${{ inputs.release-type }}
      with:
        script: |
          const { PREV_VERSION, RELEASE_TYPE } = process.env;
          console.log('Previous version was', PREV_VERSION);
          console.log('Release type is', RELEASE_TYPE);

          const numbers = PREV_VERSION.split('.');
          const numberIdx = ['major', 'minor', 'patch'].indexOf(RELEASE_TYPE);
          numbers[numberIdx] = parseInt(numbers[numberIdx]) + 1;
          for (let i = numberIdx + 1; i < numbers.length; i++) {
            numbers[i] = 0;
          }
          return numbers.join('.');
        result-encoding: string
    - name: Store version numbers
      shell: bash
      run: |
        mkdir output
        echo "${PREV_VERSION}" > output/previous-version.txt
        echo "${NEW_VERSION}" > output/new-version.txt
      env:
        PREV_VERSION: "${{ steps.prev-version.outputs.result }}"
        NEW_VERSION: "${{ steps.new-version.outputs.result }}"
    - name: Upload version artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.package-name }}
        path: output
        retention-days: 5
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        persist-credentials: false
    - name: Check for terraform-docs.yml
      id: tf_docs
      shell: bash
      env:
        PACKAGE_NAME: ${{ inputs.package-name }}
      run: |
        TF_DOCS_PATH="$PACKAGE_NAME/.terraform-docs.yml"
        if [ -f $TF_DOCS_PATH ] ; then
          echo "tf_docs=true" >> "$GITHUB_OUTPUT"
        else
          echo "tf_docs=false" >> "$GITHUB_OUTPUT"
        fi
    - name: Render terraform docs inside the README.md
      if: ${{ steps.tf_docs.outputs.tf_docs == 'true' }}
      id: terraform_docs
      uses: terraform-docs/gh-actions@aeae0038ed47a547e0c0fca5c059d3335f48fb25 #v1.3.0
      with:
        working-dir: ${{ inputs.package-name }}
        output-file: README.md
        config-file: .terraform-docs.yml
    - name: If documentation is updated, push to PR branch with a signed commit
      if: ${{ steps.terraform_docs.outputs.num_changed != '0' }}
      env:
        DESTINATION_BRANCH: ${{ github.event.pull_request.head.ref }}
        FILE_TO_COMMIT: ${{ inputs.package-name }}/README.md
        GITHUB_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        ### Signed commit workaround - if we do a normal `git commit` here, it will be unsigned
        # GHA doesn't have a good native way to sign commits (https://github.com/actions/runner/issues/667)
        # Commits submitted via the API do get signed, so do that instead - adapted from https://gist.github.com/swinton/03e84635b45c78353b1f71e41007fc7c
        export TODAY=$( date -u '+%Y-%m-%d' )
        export MESSAGE="chore(docs): ${FILE_TO_COMMIT}"
        export SHA=$( git rev-parse $DESTINATION_BRANCH:$FILE_TO_COMMIT )
        export CONTENT=$( base64 -i $FILE_TO_COMMIT )
        gh api --method PUT /repos/:owner/:repo/contents/$FILE_TO_COMMIT \
          --field message="$MESSAGE" \
          --field content="$CONTENT" \
          --field encoding="base64" \
          --field branch="$DESTINATION_BRANCH" \
          --field sha="$SHA"
